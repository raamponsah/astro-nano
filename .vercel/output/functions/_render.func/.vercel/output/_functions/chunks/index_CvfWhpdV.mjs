import { m as createComponent, n as renderTemplate, p as maybeRenderHead, z as unescapeHTML } from './astro/server_D9ztAZ7o.mjs';
import 'kleur/colors';
import 'clsx';

const html = "<p>The <code>work</code> collections is found in <code>src/content/work</code>.</p>\n<p>Working with the <code>work</code> collection:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\"><code><span class=\"line\"><span>📁 /src/content/work</span></span>\n<span class=\"line\"><span>└── 📄 apple.md</span></span>\n<span class=\"line\"><span>└── 📄 facebook.md</span></span>\n<span class=\"line\"><span>└── 📄 google.md</span></span>\n<span class=\"line\"><span>└── 📄 mcdonalds.md</span></span>\n<span class=\"line\"><span></span></span></code></pre>\n<p>In the above example, four entries on the /work page will be generated.</p>\n<p><code>apple</code>, <code>facebook</code>, <code>google</code>, <code>mcdonalds</code></p>\n<p>All content must be preceded by required metadata in the markdown file in <code>yaml</code> format, and be enclosed by triple dashes. --- ---</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"mdx\"><code><span class=\"line\"><span style=\"color:#79B8FF;font-weight:bold\">---</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">company: \"McDonalds\"</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">role: \"French Fryer\"</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">dateStart: \"01/01/2020\"</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">dateEnd: \"11/27/2022\"</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF;font-weight:bold\">---</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Metadata fields</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th align=\"left\">Field</th><th align=\"left\">Req</th><th align=\"left\">Type</th><th align=\"left\">Remarks</th></tr></thead><tbody><tr><td align=\"left\">company</td><td align=\"left\">Yes</td><td align=\"left\">string</td><td align=\"left\">Company name.</td></tr><tr><td align=\"left\">role</td><td align=\"left\">Yes</td><td align=\"left\">string</td><td align=\"left\">Role at the company. Ex: Full stack developer.</td></tr><tr><td align=\"left\">dateStart</td><td align=\"left\">Yes</td><td align=\"left\">string</td><td align=\"left\">Date string that can be parsed to a date.</td></tr><tr><td align=\"left\">dateEnd</td><td align=\"left\">Yes</td><td align=\"left\">string</td><td align=\"left\">Date string that can be parsed to a date.</td></tr></tbody></table>\n<p>* <em>Note: If you are still employed at company, for dateEnd you can enter Current,\r\nNow or Present instead of a date.</em></p>\n<p>All that’s left to do is write your content under the metadata.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"mdx\"><code><span class=\"line\"><span style=\"color:#79B8FF;font-weight:bold\">---</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">title: \"My awesome project\"</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">description: \"A description of my project.\"</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">date: \"Mar 22 2024\"</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">draft: false</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF;font-weight:bold\">---</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#79B8FF;font-weight:bold\">### Woot</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">This is a paragraph about my role at this company.</span></span>\n<span class=\"line\"></span></code></pre>\n<p>🎉 Congrats, you are now a blogger, <em>and</em> developer, <em>and</em> employed.</p>";

				const frontmatter = {"title":"Work Collection","description":"How to add work experience.","date":"Mar 19 2024"};
				const file = "C:/Users/GATEWAY/DeveloperConsole/astro-nano/src/content/blog/04-work-collection/index.md";
				const url = undefined;
				function rawContent() {
					return "\r\nThe `work` collections is found in `src/content/work`.\r\n\r\nWorking with the `work` collection:\r\n\r\n```\r\n📁 /src/content/work\r\n└── 📄 apple.md\r\n└── 📄 facebook.md\r\n└── 📄 google.md\r\n└── 📄 mcdonalds.md\r\n```\r\n\r\nIn the above example, four entries on the /work page will be generated.\r\n\r\n`apple`, `facebook`, `google`, `mcdonalds`\r\n\r\nAll content must be preceded by required metadata in the markdown file in `yaml` format, and be enclosed by triple dashes. --- ---\r\n\r\n```mdx\r\n---\r\ncompany: \"McDonalds\"\r\nrole: \"French Fryer\"\r\ndateStart: \"01/01/2020\"\r\ndateEnd: \"11/27/2022\"\r\n---\r\n```\r\n\r\nMetadata fields\r\n\r\n| Field       | Req | Type    | Remarks                                          |\r\n| :---------- | :-- | :------ | :----------------------------------------------- |\r\n| company     | Yes | string  | Company name.                                    |\r\n| role        | Yes | string  | Role at the company. Ex: Full stack developer.   |\r\n| dateStart   | Yes | string  | Date string that can be parsed to a date.        |\r\n| dateEnd     | Yes | string  | Date string that can be parsed to a date.        |\r\n\r\n\\* _Note: If you are still employed at company, for dateEnd you can enter Current, \r\nNow or Present instead of a date._\r\n\r\nAll that's left to do is write your content under the metadata.\r\n\r\n```mdx\r\n---\r\ntitle: \"My awesome project\"\r\ndescription: \"A description of my project.\"\r\ndate: \"Mar 22 2024\"\r\ndraft: false\r\n---\r\n\r\n### Woot\r\n\r\nThis is a paragraph about my role at this company.\r\n```\r\n\r\n🎉 Congrats, you are now a blogger, _and_ developer, _and_ employed.";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`;
				});

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, rawContent, url };
